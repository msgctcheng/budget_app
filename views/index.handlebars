<div class="bodywrap">
    <div class="g-signin2" id="indexSign" data-onsuccess="onSignIn"></div>
    <div class="logBox">
        <a class="signOut" href="#" onclick="signOut();">Sign out</a>
    </div>
    <div id="dashboard_top" class="tabcontent tabheader">
        <h2>Dashboard Hello</h2>
        <p>User Dashboard</p>
    </div>

    <div id="spending_top" class="tabcontent tabheader">
        <h2>Spending</h2>
        <p>User's Spending</p>
    </div>

    <button class="tablink" onclick="openTab('dashboard_top', 'dashboard_bot', this, '#0D6BFF')" id="defaultOpen">Dashboard</button>
    <button class="tablink" onclick="openTab('spending_top', 'spending_bot', this, '#28D65C')">Spending</button>

    <div id="dashboard_bot" class="tabcontent tabBody">
        <div class="dashboardCard card">
            <h3>Dashboard</h3>
            <p>User Dashboard</p>
            <div class="graph"></div>
            <button class="modalButton">Add Transaction</button>
        </div>
    </div>
    <div id="spending_bot" class="tabcontent tabBody">
        <div class="spendingCard card">
            <h3>Spending</h3>
            <p>User's Spending</p>
            <div class="transactions-container">
                <table class="transTable">
                    <tr class="headLine">
                        <th>Date</th>
                        <th>GoogleID</th>
                        <th>Name</th>
                        <th>Amount</th>
                        <th>Balance</th>
                    </tr>

                </table>
            </div>
            <button class="modalButton">Add Transaction</button>
        </div>
    </div>

    <!-- Appends d3 graph to empty div -->
    <div id="modal">
        <div class="modalContent">

            <div class="switch moditem">
                <input type="checkbox" class="switch-checkbox" id="myswitch" checked>
                <label class="switch-label" for="myswitch">
                    <span class="switch-inner"></span>
                    <span class="switch-switch"></span>
                </label>
            </div>

            <input class="amount moditem" type="text" placeholder="Amount">

            <select id="drop" class="dropCont moditem">
                <option value="rent">Rent</option>
                <option value="bills">Bills</option>
                <option value="food">Food</option>
                <option value="gas">Gas</option>
                <option value="other">Other</option>
            </select>

            <input class="description moditem" type="text" placeholder="Description">

            <button class="modalSubmit moditem">Submit</button>
            <span class="closeModal moditem">&times;</span>
        </div>
    </div>
</div>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script>
    // Set the dimensions of the canvas / graph
    var margin = { top: 30, right: 20, bottom: 30, left: 50 },
        width = 600 - margin.left - margin.right,
        height = 270 - margin.top - margin.bottom;
    // Parse the date / time
    var parseDate = d3.time.format("%Y-%m-%dT%X.%LZ").parse;
    // Set the ranges
    var x = d3.time.scale().range([0, width]);
    var y = d3.scale.linear().range([height, 0]);
    // Define the axes
    var xAxis = d3.svg.axis().scale(x)
        .orient("bottom").ticks(5);
    var yAxis = d3.svg.axis().scale(y)
        .orient("left").ticks(5);
    // Define the line
    var valueline = d3.svg.line()
        .x(function (d) { return x(d.createdAt); })
        .y(function (d) { return y(d.Amount); });
    // Adds the svg canvas`
    var svg = d3.select(".graph")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform",
        "translate(" + margin.left + "," + margin.top + ")");
    // Get the data
        d3.json(window.location.origin + "/userInfo", function(error, data) {
            console.log(data);
    // d3.csv("data.csv", function (error, data) {
        data.forEach(function (d) {
            d.createdAt = parseDate(d.createdAt);
            d.Amount = +d.Amount;
        });
        // Scale the range of the data
        x.domain(d3.extent(data, function (d) { return d.createdAt; }));
        y.domain([0, d3.max(data, function (d) { return d.Amount; })]);
        // Add the valueline path.
        svg.append("path")
            .attr("class", "line")
            .attr("d", valueline(data));
        // Add the X Axis
        svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis);
        // Add the Y Axis
        svg.append("g")
            .attr("class", "y axis")
            .call(yAxis);
    });
</script>