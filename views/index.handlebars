<div class="bodywrap">
    <div class="g-signin2" id="indexSign" data-onsuccess="onSignIn"></div>
    <div class="logBox">
        <a class="signOut" href="#" onclick="signOut();">Sign out</a>
    </div>
    <div class="currentBalance">
        <p>Current Balance: $
            <span id="balance"></span>
        </p>
    </div>
    <div id="dashboard_top" class="tabcontent tabheader">
        <div class="headcontent">
            <h2>Balance History</h2>
           <br>
        </div>
    </div>

    <div id="spending_top" class="tabcontent tabheader">
        <div class="headcontent">
            <h2>Transactions</h2>
            <br>
        </div>
    </div>

    <button class="tablink dash" onclick="openTab('dashboard_top', 'dashboard_bot', this, '#0D6BFF')" id="defaultOpen">Balance History</button>
    <button id="spending" class="tablink" onclick="openTab('spending_top', 'spending_bot', this, '#28D65C')">Transactions</button>

    <div id="dashboard_bot" class="tabcontent tabBody">
        <div class="dashboardCard card">
            <h3>Balance History</h3>
           
            <div class="graph"></div>
            <button class="modalButton">Add Transaction</button>
        </div>
    </div>
    <div id="spending_bot" class="tabcontent tabBody">
        <div class="spendingCard card">
            <h3>Recent Transactions</h3>
        
            <div class="transactions-container">
                <table class="transTable">
                    <thead class="headLine">
                        <th>Date</th>
                        <th>Category</th>
                        <th>Description</th>
                        <th>Amount</th>
                    </thead>
                    <tbody class="tableBody">

                    </tbody>
                </table>
            </div>
            <button class="modalButton">Add Transaction</button>
        </div>
    </div>

    <!-- Appends d3 graph to empty div -->
    <div id="modal">
        <div class="modalContent">

            <div class="switch moditem">
                <input type="checkbox" class="switch-checkbox" id="myswitch" checked>
                <label class="switch-label" for="myswitch">
                    <span class="switch-inner"></span>
                    <span class="switch-switch"></span>
                </label>
            </div>

            <input class="amount moditem" type="text" placeholder="Amount">

            <select id="drop" class="dropCont moditem">
                <option value="rent">Rent</option>
                <option value="bills">Bills</option>
                <option value="food">Food</option>
                <option value="gas">Gas</option>
                <option value="other">Other</option>
            </select>

            <input class="description moditem" type="text" placeholder="Description">

            <button class="modalSubmit moditem">Submit</button>
            <audio id="cashregister">
                <source src="/assets/audio/cashregister.mp3">
            </audio>
            <audio id="coindrop">
                <source src="/assets/audio/coindrop.mp3">
            </audio>
            <span class="closeModal moditem">&times;</span>

        </div>
    </div>
</div>
<!-- <script src="https://d3js.org/d3.v4.min.js"></script> -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.0.0/d3.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.21.0/moment.min.js"></script>
<script>
    function gapiInit() {
        // Load the auth2 module into the Google API object.
        gapi.load('auth2', function () {

            console.log('Loaded auth2');
            let googleUser;

            // Init the auth2 module with our client ID
            // https://developers.google.com/identity/sign-in/web/devconsole-project
            const googleAuth = gapi.auth2.init({
                client_id: '482330377038-9e8si9pdrclbp7gvrptloejndrnprrci.apps.googleusercontent.com'
            });

            // Wait until the auth module is finished loading via a Promise.
            googleAuth.then(() => {

                // The user may have gotten automatically signed-in via Google.
                if (googleAuth.isSignedIn.get()) {
                    console.log('User was logged in on page load.')
                    validateUser(googleAuth.currentUser.get());
                }

                // Listen for changes in the user's signed-in status.
                googleAuth.isSignedIn.listen((signedIn) => {
                    if (signedIn) {
                        console.log('User just signed in manually.');
                        validateUser(googleAuth.currentUser.get());
                    } else {
                        console.log('User just signed out.');
                    }
                });
            }, (error) => console.error(error));

        });
    }

    const validateUser = (user) => {
        // console.log(`ID Token: ${user.getAuthResponse().id_token}`);

        const profile = user.getBasicProfile();
        // console.log(`ID: ${profile.getId()}`);
        // console.log(`Name: ${profile.getName()}`);
        // console.log(`Email: ${profile.getEmail()}`);
        // console.log(`ImageUrl: ${profile.getImageUrl()}`);
        // console.log("validated");
        var id_token = user.getAuthResponse().id_token;
        $(".modalSubmit").on("click", function (event) {
            event.preventDefault();
            if ($("input[type=checkbox").prop("checked")) {
                // Make a newTransaction object
                var newTransaction = {
                    Balance: true,
                    Amount: $(".amount").val().trim(),
                    Category: $(".dropCont").val().trim(),
                    Description: $(".description").val().trim(),
                    googleId: profile.getEmail()
                };
            document.getElementById("cashregister").play();
            } else {
                // Make a newTransaction object
                var newTransaction = {
                    Balance: false,
                    Amount: $(".amount").val().trim(),
                    Category: $(".dropCont").val().trim(),
                    Description: $(".description").val().trim(),
                    googleId: profile.getEmail()
                };
                document.getElementById("coindrop").play();
                // if balance is negative alert window
            }
            console.log(newTransaction);
            $(".amount").val("");
            $(".description").val("");

            $.ajax({
                type: "POST",
                url: window.location.origin + "/api/transactions",
                data: newTransaction
            }).success(function (response) {

                var html = "";
                for (var i = 0; i < response.length; i++) {
                    if (i === 0) {
                        var recentBalance = response[i].Balance;
                    }

                    var signCheck;
                    if (response[i].Sign === true) {
                        signCheck = "+";
                    } else if (response[i].Sign === false) {
                        signCheck = "-";
                    }

                    var dateMoment2 = moment(response[i].createdAt).format('M-DD-YYYY');
                    
                    if (signCheck === "-") {
                         html += `<tr style="background-color: #E85452"><td>${dateMoment2}</td><td>${response[i].Category}</td><td>${response[i].Description}</td>` +
                        `<td>${signCheck}$${response[i].Amount}</td></tr>`;
                    } else if (signCheck === "+") {
                         html += `<tr style="background-color: rgb(37, 216, 126)"><td>${dateMoment2}</td><td>${response[i].Category}</td><td>${response[i].Description}</td>` +
                        `<td>${signCheck}$${response[i].Amount}</td></tr>`;
                    }
                  
                }
                $('#balance').text(recentBalance);
                $('.tableBody').empty().append(html);
            });

            $.post('/login/verify', {"idtoken" : id_token})
                    .then((response) => {
                        // console.log('Response from /api/auth:', response.email);                
                        if (response.valid) {
                            $.ajax({
                                type: "POST",
                                url: window.location.origin + "/userInfo",
                                data: {email : response.email}
                            }).success(function(response) {
                                // console.log('submit on graph data', response);

                                graph(response);
                            });
                        } else {
                            console.error(response.error);
                        }
                });
        });
      

        $('#spending').on('click', function () {
            // get
            // return las 10 for user
            $.ajax({
                type: "POST",
                url: window.location.origin + "/spending",
                data: { email: profile.getEmail() }
            }).success(function (response) {

                var html2 = "";
                for (var i = 0; i < response.length; i++) {
                    if (i === 0) {
                        var recentBalance = response[i].Balance;
                    }

                    var signCheck2;
                    if (response[i].Sign === true) {
                        signCheck2 = "+";
                    } else if (response[i].Sign === false) {
                        signCheck2 = "-";
                    }
                    var dateMoment = moment(response[i].createdAt).format('M-DD-YYYY');

                    if (signCheck2 === "-") {
                        html2 += `<tr style="background-color: #E85452"><td>${dateMoment}</td><td>${response[i].Category}</td><td>${response[i].Description}</td>` +
                         `<td>${signCheck2}$${response[i].Amount}</td></tr>`;
                    } else if (signCheck2 === "+") {
                        html2 += `<tr style="background-color: rgb(37, 216, 126)"><td>${dateMoment}</td><td>${response[i].Category}</td><td>${response[i].Description}</td>` +
                        `<td>${signCheck2}$${response[i].Amount}</td></tr>`;
                    }
                    
                }
                $('.tableBody').empty().append(html2);
            });
        });


        $.post('/login/verify', { "idtoken": id_token })
            .then((response) => {
                console.log('Response from /api/auth:', response.email);                
                if (response.valid) {
                    $.ajax({
                        type: "POST",
                        url: window.location.origin + "/userInfo",
                        data: {email : response.email}
                    }).success(function(res) {

                        // console.log('on login', res);

                        graph(res);
                        $("#balance").text(res[0].Balance);
                    });
                } else {
                    console.error(res.error);
                }
        });
    }

    function graph(resData) {

    // Set the dimensions of the canvas / graph
    var margin = { top: 30, right: 20, bottom: 30, left: 50 },
                            width = 600 - margin.left - margin.right,
                            height = 270 - margin.top - margin.bottom;
                        // Parse the date / time
                        var parseDate = d3.time.format("%Y-%m-%dT%X.%LZ").parse;
                        // Set the ranges
                        var x = d3.time.scale().range([0, width]);
                        var y = d3.scale.linear().range([height, 0]);
                        // Define the axes
                        var xAxis = d3.svg.axis().scale(x)
                            .orient("bottom").ticks(5);
                        var yAxis = d3.svg.axis().scale(y)
                            .orient("left").ticks(5);
                        // Define the line
                        var valueline = d3.svg.line()
                            .x(function (d) { return x(d.createdAt); })
                            .y(function (d) { return y(d.Balance); });
                        // Adds the svg canvas`
                        $('.graph').empty();
                        var svg = d3.select(".graph")
                            .append("svg")
                            .attr("width", width + margin.left + margin.right)
                            .attr("height", height + margin.top + margin.bottom)
                            .append("g")
                            .attr("transform",
                            "translate(" + margin.left + "," + margin.top + ")");
                        // Get the data

                            // d3.json(window.location.origin + "/userInfo", function(error, data) {
                            var data = resData;
                            data.forEach(function (d) {
                                d.createdAt = parseDate(d.createdAt);
                                d.Balance = +d.Balance;
                            });
                            // Scale the range of the data
                            x.domain(d3.extent(data, function (d) { return d.createdAt; }));
                            y.domain([0, d3.max(data, function (d) { return d.Balance; })]);
                            // Add the valueline path.
                            svg.append("path")
                                .attr("class", "line")
                                .attr("d", valueline(data));
                            // Add the X Axis
                            svg.append("g")
                                .attr("class", "x axis")
                                .attr("transform", "translate(0," + height + ")")
                                .call(xAxis);
                            // Add the Y Axis
                            svg.append("g")
                                .attr("class", "y axis")
                                .call(yAxis);

}
</script>